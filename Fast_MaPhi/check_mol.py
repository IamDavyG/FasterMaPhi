from rdkit import Chem
import os
import subprocess
import glob
import shutil



def check_mol_struct(obabel, molepath, mopacEXE):
    mole_all = molepath + "/" + str("*.mol2")
    molecules_F = glob.glob(mole_all)




    if os.path.exists(molepath + "/" + str("molecules_error")):
        shutil.rmtree(molepath + "/" + str("molecules_error"))
        
    else: 
        os.mkdir(molepath + "/"  + str("molecules_error"))


    for k in molecules_F:
        molecule_path, molecule_file = os.path.split(k)
        subprocess.call(obabel + str("\t-imol2\t") + molecule_path + "/" + molecule_file + str("\t-omol2\t") + molecule_path + "/" + molecule_file, shell=True)
        print("##############################################################################################")
        print("\n\n       Checking molecule: {}  \n\n".format(molecule_file))                
        print("##############################################################################################")
        with open(molepath + "/" + molecule_file) as fp:
            for cnt, line in enumerate(fp):
                if '@<TRIPOS>BOND' in line:
                    last=cnt
        with open(molepath + "/" + molecule_file) as fp:
            for cnt, line in enumerate(fp):
                if '@<TRIPOS>ATOM' in line:
                    ini=cnt
                
        #Extracting geometry from mol2 file
        with open(molepath + "/" + molecule_file) as fp:
            struct=[]
            for cnt, line in enumerate(fp):
                if cnt > ini and cnt < last:
                    struct.append(line[8:46])
                
        #Generating XYZ coordinates and MOPAC for charge estimatimation
        valuesMatrix = ""
        for i in struct:
            valuesMatrix += "{}\n".format(str(i))
            f = open(molepath + "/" + "molecule.mop","w") 
            f.write("CHARGES\n\nFile generate by El_Dryosa\n{}".format(valuesMatrix))
            f.close()
                
        subprocess.call(mopacEXE + "\t" + molepath + "/" + str("molecule.mop"), shell=True)


        #Getting total charge from MOPAC output file"molecule.out"
        with open(molepath + "/" + "molecule.out") as fp:
            for cnt, line in enumerate(fp):
                if 'COMPUTED CHARGE ON SYSTEM:' in line:
                    charge=int(line[37:39])
                    break
                


        #generating input file for initial MOPAC optimization using PM7 "See MOPAC manual"
        f_opt = open(molepath + "/" + "molecule_opt.mop","w")
        f_opt.write("PM7 XYZ CHARGE={} Singlet BONDS AUX \n\nFile generated by El_Dryosa\n{}".format(charge,valuesMatrix))
        f_opt.close()

        #Submiting MOPAC optimization
        subprocess.call(mopacEXE + "\t" + molepath + "/" + str("molecule_opt.mop"), shell=True)

        subprocess.call(obabel + str("\t-imopout\t") + molepath + "/" + str("molecule_opt.out") + str("\t-omol\t") + molepath + "/" + "molecule.mol", shell=True)


        
        if Chem.MolFromMolFile(molepath + "/" + str("molecule.mol")) is None:
            print("\n\nPlease check the molecule {}, it has some valence problems!!!".format(molecule_file))
            print("\n\nYou can copy and paste the  smile from\nmolecules_error directory ({}.smi), into\
            http://cdb.ics.uci.edu/cgibin/Smi2DepictWeb.py\nto check what is the problem!\n".format(molecule_file))
            subprocess.call(obabel + str("\t-imol\t") + "molecule.mol" + str("\t-osmi\t") + molecule_file + ".smi", shell=True)
            if os.path.exists(molepath + "/" + molecule_file ):
                shutil.move(molepath + "/" + molecule_file, molepath + "/" + str("molecules_error") + "/" + molecule_file)
            if os.path.exists( molecule_file + ".smi" ):
                shutil.move(molecule_file + ".smi", molepath  + "/" + str("molecules_error") + "/" + molecule_file + ".smi")
            print("##############################################################################################")    
            print("\n\n     Molecule {} did not pass the checking  \n\n".format(molecule_file))    
            print("##############################################################################################")
        else:
            print("##############################################################################################")
            print("\n\n     Molecule {} pass the checking  \n\n".format(molecule_file))
            print("##############################################################################################")
    try:
        os.remove(molecule_path + "/" + "molecule.mop")
        os.remove(molecule_path + "/" + "molecule_opt.arc")
        os.remove(molecule_path + "/" + "molecule.out")
        os.remove(molecule_path + "/" + "molecule_opt.aux")
        os.remove(molecule_path + "/" + "molecule_opt.out")
        os.remove(molecule_path + "/" + "molecule_opt.mop")
        os.remove(molecule_path + "/" + "molecule.log")
        os.remove(molecule_path + "/" + "molecule.mol")
    except OSError:
        pass
